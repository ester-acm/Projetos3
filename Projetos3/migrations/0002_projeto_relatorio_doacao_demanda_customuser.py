# Generated by Django 4.2.7 on 2023-11-26 14:56

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("Projetos3", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Projeto",
            fields=[
                ("nomeProjeto", models.CharField(max_length=100)),
                ("responsavel", models.CharField(max_length=50)),
                ("descricao", models.TextField(max_length=1000)),
                ("contatoTelefone", models.CharField(max_length=14)),
                ("contatoEmail", models.EmailField(max_length=254)),
                ("contatoRedeSociais", models.CharField(max_length=50)),
                ("demanda", models.TextField(max_length=1000)),
                (
                    "idProjeto",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Relatorio",
            fields=[
                (
                    "idRelatorio",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("titulo", models.CharField(max_length=50)),
                ("descricao", models.TextField(max_length=15000)),
                ("dataRelatorio", models.DateTimeField()),
                (
                    "idProjetoRelatorio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="Projetos3.projeto",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Doacao",
            fields=[
                ("valorDoado", models.FloatField()),
                ("momentoDoacao", models.DateTimeField()),
                (
                    "idDoacao",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "nomeDoador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="Projetos3.usuario",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Demanda",
            fields=[
                (
                    "idDemanda",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("nomeDemanda", models.CharField(max_length=50)),
                ("descricaoDemanda", models.TextField(max_length=200)),
                ("contatoDemanda", models.CharField(max_length=50)),
                (
                    "idProjetoDemanda",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="demandas",
                        to="Projetos3.projeto",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, and digits only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="Username",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(max_length=30)),
                ("last_name", models.CharField(max_length=50)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Os grupos que este usuário pertence. Um usuário terá todas as permissões concedidas a cada um dos seus grupos.",
                        related_name="customuser_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="grupos",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Permissões específicas para este usuário.",
                        related_name="customuser_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="permissões do usuário",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
